// Copyright (c) 2022-2023 - for information on the respective copyright owner
// see the NOTICE file and/or the repository at
// https://github.com/catenax-ng/product-esc-backbone-code
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escbackbone/ubc/quadraticsegment.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuadraticSegment struct {
	A             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=a,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"a"`
	B             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=b,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"b"`
	C             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=c,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"c"`
	ScalingFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=scalingFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"scalingFactor"`
	InitialX0     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=initialX0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initialX0"`
	CurrentX0     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=currentX0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"currentX0"`
}

func (m *QuadraticSegment) Reset()         { *m = QuadraticSegment{} }
func (m *QuadraticSegment) String() string { return proto.CompactTextString(m) }
func (*QuadraticSegment) ProtoMessage()    {}
func (*QuadraticSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeac9996564ed96c, []int{0}
}
func (m *QuadraticSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuadraticSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuadraticSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuadraticSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuadraticSegment.Merge(m, src)
}
func (m *QuadraticSegment) XXX_Size() int {
	return m.Size()
}
func (m *QuadraticSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_QuadraticSegment.DiscardUnknown(m)
}

var xxx_messageInfo_QuadraticSegment proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QuadraticSegment)(nil), "escbackbone.ubc.QuadraticSegment")
}

func init() {
	proto.RegisterFile("escbackbone/ubc/quadraticsegment.proto", fileDescriptor_eeac9996564ed96c)
}

var fileDescriptor_eeac9996564ed96c = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd2, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0x06, 0xf0, 0x8b, 0xd5, 0x42, 0x0f, 0x44, 0x39, 0x1c, 0x82, 0x43, 0x2a, 0x0e, 0x45, 0x90,
	0x5e, 0x0a, 0xae, 0x4e, 0x45, 0x9d, 0x5c, 0xfc, 0x33, 0x14, 0xb7, 0x37, 0x6f, 0xc3, 0x19, 0xda,
	0x4b, 0xea, 0x25, 0x81, 0xfa, 0x2d, 0xfc, 0x44, 0xce, 0x1d, 0x3b, 0x8a, 0x43, 0x91, 0xbb, 0x2f,
	0x22, 0x77, 0xd5, 0x5a, 0xd7, 0x4c, 0x09, 0xbc, 0xcf, 0xf3, 0x9b, 0x9e, 0xb8, 0x27, 0x2d, 0x0a,
	0xc0, 0x89, 0x30, 0x5a, 0x72, 0x2f, 0x90, 0xbf, 0x78, 0x18, 0x17, 0xe0, 0x14, 0x5a, 0x99, 0xe5,
	0x52, 0xbb, 0x74, 0x56, 0x18, 0x67, 0x92, 0x83, 0xad, 0x5c, 0xea, 0x05, 0x1e, 0x1f, 0x65, 0x26,
	0x33, 0xcd, 0x8d, 0xd7, 0xbf, 0x75, 0xec, 0xf4, 0xbd, 0x15, 0x1f, 0xde, 0xfd, 0x0a, 0x0f, 0x6b,
	0x21, 0xb9, 0x8c, 0x09, 0x50, 0x72, 0x42, 0xce, 0x3a, 0xc3, 0x74, 0xb1, 0xea, 0x46, 0x9f, 0xab,
	0x6e, 0x2f, 0x53, 0xee, 0xd9, 0x8b, 0x14, 0x4d, 0xce, 0xd1, 0xd8, 0xdc, 0xd8, 0x9f, 0xa7, 0x6f,
	0xc7, 0x13, 0xee, 0x5e, 0x67, 0xd2, 0xa6, 0x57, 0x12, 0xef, 0x09, 0xd4, 0x6d, 0x41, 0x77, 0xc2,
	0xda, 0xa2, 0x6e, 0x23, 0x6d, 0x85, 0xb5, 0x31, 0x79, 0x8c, 0xf7, 0x2d, 0xc2, 0x54, 0xe9, 0xec,
	0x06, 0xd0, 0x99, 0x82, 0xee, 0x06, 0x49, 0xff, 0x91, 0xe4, 0x36, 0xee, 0x28, 0xad, 0x9c, 0x82,
	0xe9, 0x68, 0x40, 0xf7, 0x82, 0xc4, 0x3f, 0xa0, 0xd6, 0xd0, 0x17, 0x85, 0xd4, 0x6e, 0x34, 0xa0,
	0xed, 0x30, 0x6d, 0x03, 0x0c, 0xaf, 0x17, 0x25, 0x23, 0xcb, 0x92, 0x91, 0xaf, 0x92, 0x91, 0xb7,
	0x8a, 0x45, 0xcb, 0x8a, 0x45, 0x1f, 0x15, 0x8b, 0x9e, 0xce, 0xb7, 0x31, 0x70, 0x52, 0xc3, 0x9c,
	0x4b, 0x8b, 0xfd, 0xcd, 0x7a, 0xe6, 0xcd, 0x7e, 0x1a, 0x55, 0xb4, 0x9b, 0x39, 0x5c, 0x7c, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xc1, 0x15, 0x52, 0x38, 0x5f, 0x02, 0x00, 0x00,
}

func (m *QuadraticSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuadraticSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuadraticSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentX0.Size()
		i -= size
		if _, err := m.CurrentX0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuadraticsegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InitialX0.Size()
		i -= size
		if _, err := m.InitialX0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuadraticsegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ScalingFactor.Size()
		i -= size
		if _, err := m.ScalingFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuadraticsegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.C.Size()
		i -= size
		if _, err := m.C.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuadraticsegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.B.Size()
		i -= size
		if _, err := m.B.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuadraticsegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.A.Size()
		i -= size
		if _, err := m.A.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuadraticsegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuadraticsegment(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuadraticsegment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuadraticSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.A.Size()
	n += 1 + l + sovQuadraticsegment(uint64(l))
	l = m.B.Size()
	n += 1 + l + sovQuadraticsegment(uint64(l))
	l = m.C.Size()
	n += 1 + l + sovQuadraticsegment(uint64(l))
	l = m.ScalingFactor.Size()
	n += 1 + l + sovQuadraticsegment(uint64(l))
	l = m.InitialX0.Size()
	n += 1 + l + sovQuadraticsegment(uint64(l))
	l = m.CurrentX0.Size()
	n += 1 + l + sovQuadraticsegment(uint64(l))
	return n
}

func sovQuadraticsegment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuadraticsegment(x uint64) (n int) {
	return sovQuadraticsegment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuadraticSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuadraticsegment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuadraticSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuadraticSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScalingFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialX0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialX0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentX0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentX0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuadraticsegment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuadraticsegment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuadraticsegment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuadraticsegment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuadraticsegment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuadraticsegment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuadraticsegment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuadraticsegment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuadraticsegment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuadraticsegment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuadraticsegment = fmt.Errorf("proto: unexpected end of group")
)
