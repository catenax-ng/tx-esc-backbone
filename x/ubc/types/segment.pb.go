// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escbackbone/ubc/segment.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Segment struct {
	P0     string `protobuf:"bytes,1,opt,name=p0,proto3" json:"p0,omitempty"`
	A      string `protobuf:"bytes,2,opt,name=a,proto3" json:"a,omitempty"`
	B      string `protobuf:"bytes,3,opt,name=b,proto3" json:"b,omitempty"`
	P1     string `protobuf:"bytes,4,opt,name=p1,proto3" json:"p1,omitempty"`
	P0X    string `protobuf:"bytes,5,opt,name=p0X,proto3" json:"p0X,omitempty"`
	P1X    string `protobuf:"bytes,6,opt,name=p1X,proto3" json:"p1X,omitempty"`
	DelatX string `protobuf:"bytes,7,opt,name=delatX,proto3" json:"delatX,omitempty"`
}

func (m *Segment) Reset()         { *m = Segment{} }
func (m *Segment) String() string { return proto.CompactTextString(m) }
func (*Segment) ProtoMessage()    {}
func (*Segment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7293bbfb2f004b1, []int{0}
}
func (m *Segment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Segment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Segment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Segment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segment.Merge(m, src)
}
func (m *Segment) XXX_Size() int {
	return m.Size()
}
func (m *Segment) XXX_DiscardUnknown() {
	xxx_messageInfo_Segment.DiscardUnknown(m)
}

var xxx_messageInfo_Segment proto.InternalMessageInfo

func (m *Segment) GetP0() string {
	if m != nil {
		return m.P0
	}
	return ""
}

func (m *Segment) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *Segment) GetB() string {
	if m != nil {
		return m.B
	}
	return ""
}

func (m *Segment) GetP1() string {
	if m != nil {
		return m.P1
	}
	return ""
}

func (m *Segment) GetP0X() string {
	if m != nil {
		return m.P0X
	}
	return ""
}

func (m *Segment) GetP1X() string {
	if m != nil {
		return m.P1X
	}
	return ""
}

func (m *Segment) GetDelatX() string {
	if m != nil {
		return m.DelatX
	}
	return ""
}

func init() {
	proto.RegisterType((*Segment)(nil), "escbackbone.ubc.Segment")
}

func init() { proto.RegisterFile("escbackbone/ubc/segment.proto", fileDescriptor_c7293bbfb2f004b1) }

var fileDescriptor_c7293bbfb2f004b1 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0x2d, 0x4e, 0x4e,
	0x4a, 0x4c, 0xce, 0x4e, 0xca, 0xcf, 0x4b, 0xd5, 0x2f, 0x4d, 0x4a, 0xd6, 0x2f, 0x4e, 0x4d, 0xcf,
	0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x47, 0x92, 0xd6, 0x2b, 0x4d,
	0x4a, 0x56, 0x6a, 0x64, 0xe4, 0x62, 0x0f, 0x86, 0x28, 0x11, 0xe2, 0xe3, 0x62, 0x2a, 0x30, 0x90,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x2a, 0x30, 0x10, 0xe2, 0xe1, 0x62, 0x4c, 0x94, 0x60,
	0x02, 0x73, 0x19, 0x13, 0x41, 0xbc, 0x24, 0x09, 0x66, 0x08, 0x2f, 0x09, 0xac, 0xd6, 0x50, 0x82,
	0x05, 0xaa, 0xd6, 0x50, 0x48, 0x80, 0x8b, 0xb9, 0xc0, 0x20, 0x42, 0x82, 0x15, 0x2c, 0x00, 0x62,
	0x82, 0x45, 0x0c, 0x23, 0x24, 0xd8, 0xa0, 0x22, 0x86, 0x11, 0x42, 0x62, 0x5c, 0x6c, 0x29, 0xa9,
	0x39, 0x89, 0x25, 0x11, 0x12, 0xec, 0x60, 0x41, 0x28, 0xcf, 0xc9, 0xf5, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39,
	0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xb4, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3,
	0x73, 0xf5, 0x93, 0x13, 0x4b, 0x52, 0xf3, 0x12, 0x2b, 0xf4, 0x53, 0x8b, 0x93, 0x75, 0xe1, 0x3e,
	0xac, 0x00, 0xfb, 0xb1, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x45, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x31, 0xc3, 0x63, 0x17, 0x03, 0x01, 0x00, 0x00,
}

func (m *Segment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Segment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Segment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelatX) > 0 {
		i -= len(m.DelatX)
		copy(dAtA[i:], m.DelatX)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.DelatX)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.P1X) > 0 {
		i -= len(m.P1X)
		copy(dAtA[i:], m.P1X)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.P1X)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.P0X) > 0 {
		i -= len(m.P0X)
		copy(dAtA[i:], m.P0X)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.P0X)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.P1) > 0 {
		i -= len(m.P1)
		copy(dAtA[i:], m.P1)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.P1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.B) > 0 {
		i -= len(m.B)
		copy(dAtA[i:], m.B)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.B)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.P0) > 0 {
		i -= len(m.P0)
		copy(dAtA[i:], m.P0)
		i = encodeVarintSegment(dAtA, i, uint64(len(m.P0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSegment(dAtA []byte, offset int, v uint64) int {
	offset -= sovSegment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Segment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.P0)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	l = len(m.P1)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	l = len(m.P0X)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	l = len(m.P1X)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	l = len(m.DelatX)
	if l > 0 {
		n += 1 + l + sovSegment(uint64(l))
	}
	return n
}

func sovSegment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSegment(x uint64) (n int) {
	return sovSegment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Segment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Segment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Segment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P0X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P0X = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P1X = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelatX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelatX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSegment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSegment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSegment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSegment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSegment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSegment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSegment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSegment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSegment = fmt.Errorf("proto: unexpected end of group")
)
