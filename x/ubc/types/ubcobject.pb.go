// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escbackbone/ubc/ubcobject.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ubcobject struct {
	FS0             string `protobuf:"bytes,1,opt,name=fS0,proto3" json:"fS0,omitempty"`
	S0              string `protobuf:"bytes,2,opt,name=s0,proto3" json:"s0,omitempty"`
	S1              string `protobuf:"bytes,3,opt,name=s1,proto3" json:"s1,omitempty"`
	S2              string `protobuf:"bytes,4,opt,name=s2,proto3" json:"s2,omitempty"`
	QS3             string `protobuf:"bytes,5,opt,name=qS3,proto3" json:"qS3,omitempty"`
	RefProfitFactor string `protobuf:"bytes,6,opt,name=refProfitFactor,proto3" json:"refProfitFactor,omitempty"`
	RefTokenSupply  string `protobuf:"bytes,7,opt,name=refTokenSupply,proto3" json:"refTokenSupply,omitempty"`
	RefTokenPrice   string `protobuf:"bytes,8,opt,name=refTokenPrice,proto3" json:"refTokenPrice,omitempty"`
	BPool           string `protobuf:"bytes,9,opt,name=bPool,proto3" json:"bPool,omitempty"`
	FactorFy        string `protobuf:"bytes,10,opt,name=factorFy,proto3" json:"factorFy,omitempty"`
	FactorFxy       string `protobuf:"bytes,11,opt,name=factorFxy,proto3" json:"factorFxy,omitempty"`
	TradingPoint    string `protobuf:"bytes,12,opt,name=tradingPoint,proto3" json:"tradingPoint,omitempty"`
	CurrentSupply   string `protobuf:"bytes,13,opt,name=currentSupply,proto3" json:"currentSupply,omitempty"`
	SlopeP2         string `protobuf:"bytes,14,opt,name=slopeP2,proto3" json:"slopeP2,omitempty"`
	SlopeP3         string `protobuf:"bytes,15,opt,name=slopeP3,proto3" json:"slopeP3,omitempty"`
}

func (m *Ubcobject) Reset()         { *m = Ubcobject{} }
func (m *Ubcobject) String() string { return proto.CompactTextString(m) }
func (*Ubcobject) ProtoMessage()    {}
func (*Ubcobject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3b77eaec928d1f, []int{0}
}
func (m *Ubcobject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ubcobject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ubcobject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ubcobject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ubcobject.Merge(m, src)
}
func (m *Ubcobject) XXX_Size() int {
	return m.Size()
}
func (m *Ubcobject) XXX_DiscardUnknown() {
	xxx_messageInfo_Ubcobject.DiscardUnknown(m)
}

var xxx_messageInfo_Ubcobject proto.InternalMessageInfo

func (m *Ubcobject) GetFS0() string {
	if m != nil {
		return m.FS0
	}
	return ""
}

func (m *Ubcobject) GetS0() string {
	if m != nil {
		return m.S0
	}
	return ""
}

func (m *Ubcobject) GetS1() string {
	if m != nil {
		return m.S1
	}
	return ""
}

func (m *Ubcobject) GetS2() string {
	if m != nil {
		return m.S2
	}
	return ""
}

func (m *Ubcobject) GetQS3() string {
	if m != nil {
		return m.QS3
	}
	return ""
}

func (m *Ubcobject) GetRefProfitFactor() string {
	if m != nil {
		return m.RefProfitFactor
	}
	return ""
}

func (m *Ubcobject) GetRefTokenSupply() string {
	if m != nil {
		return m.RefTokenSupply
	}
	return ""
}

func (m *Ubcobject) GetRefTokenPrice() string {
	if m != nil {
		return m.RefTokenPrice
	}
	return ""
}

func (m *Ubcobject) GetBPool() string {
	if m != nil {
		return m.BPool
	}
	return ""
}

func (m *Ubcobject) GetFactorFy() string {
	if m != nil {
		return m.FactorFy
	}
	return ""
}

func (m *Ubcobject) GetFactorFxy() string {
	if m != nil {
		return m.FactorFxy
	}
	return ""
}

func (m *Ubcobject) GetTradingPoint() string {
	if m != nil {
		return m.TradingPoint
	}
	return ""
}

func (m *Ubcobject) GetCurrentSupply() string {
	if m != nil {
		return m.CurrentSupply
	}
	return ""
}

func (m *Ubcobject) GetSlopeP2() string {
	if m != nil {
		return m.SlopeP2
	}
	return ""
}

func (m *Ubcobject) GetSlopeP3() string {
	if m != nil {
		return m.SlopeP3
	}
	return ""
}

func init() {
	proto.RegisterType((*Ubcobject)(nil), "escbackbone.ubc.Ubcobject")
}

func init() { proto.RegisterFile("escbackbone/ubc/ubcobject.proto", fileDescriptor_0c3b77eaec928d1f) }

var fileDescriptor_0c3b77eaec928d1f = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcb, 0x4a, 0xeb, 0x40,
	0x18, 0xc7, 0x9b, 0xf6, 0xf4, 0x92, 0x39, 0xbd, 0x1c, 0x86, 0xb3, 0xf8, 0x10, 0x89, 0x52, 0x44,
	0x0a, 0x62, 0x6f, 0x79, 0x03, 0xc1, 0xae, 0x83, 0xd1, 0x8d, 0xbb, 0xcc, 0x38, 0xa9, 0xb1, 0x35,
	0x93, 0x4e, 0x26, 0xd0, 0xbc, 0x85, 0x2f, 0xe1, 0xbb, 0xb8, 0xec, 0xd2, 0xa5, 0xb4, 0x2f, 0x22,
	0xf9, 0x92, 0x5e, 0x17, 0x81, 0xf9, 0xff, 0x7e, 0x7f, 0x26, 0xdf, 0xc0, 0x47, 0x2e, 0x44, 0xcc,
	0x99, 0xc7, 0x67, 0x4c, 0x86, 0x62, 0x90, 0x30, 0x9e, 0x7d, 0x92, 0xbd, 0x09, 0xae, 0xfb, 0x91,
	0x92, 0x5a, 0xd2, 0xce, 0x41, 0xa1, 0x9f, 0x30, 0xde, 0xfd, 0xac, 0x10, 0xf3, 0x69, 0x5b, 0xa2,
	0xff, 0x48, 0xc5, 0x77, 0x87, 0x60, 0x5c, 0x1a, 0x3d, 0xf3, 0x21, 0x3b, 0xd2, 0x36, 0x29, 0xc7,
	0x43, 0x28, 0x23, 0x28, 0xc7, 0x79, 0x1e, 0x41, 0xa5, 0xc8, 0x23, 0xcc, 0x63, 0xf8, 0x53, 0xe4,
	0x71, 0x76, 0xc3, 0xc2, 0xb5, 0xa1, 0x9a, 0xdf, 0xb0, 0x70, 0x6d, 0xda, 0x23, 0x1d, 0x25, 0x7c,
	0x47, 0x49, 0x3f, 0xd0, 0x13, 0x8f, 0x6b, 0xa9, 0xa0, 0x86, 0xf6, 0x14, 0xd3, 0x6b, 0xd2, 0x56,
	0xc2, 0x7f, 0x94, 0x33, 0x11, 0xba, 0x49, 0x14, 0xcd, 0x53, 0xa8, 0x63, 0xf1, 0x84, 0xd2, 0x2b,
	0xd2, 0xda, 0x12, 0x47, 0x05, 0x5c, 0x40, 0x03, 0x6b, 0xc7, 0x90, 0xfe, 0x27, 0x55, 0xe6, 0x48,
	0x39, 0x07, 0x13, 0x6d, 0x1e, 0xe8, 0x19, 0x69, 0xf8, 0xf8, 0xb7, 0x49, 0x0a, 0x04, 0xc5, 0x2e,
	0xd3, 0x73, 0x62, 0x16, 0xe7, 0x65, 0x0a, 0x7f, 0x51, 0xee, 0x01, 0xed, 0x92, 0xa6, 0x56, 0xde,
	0x4b, 0x10, 0x4e, 0x1d, 0x19, 0x84, 0x1a, 0x9a, 0x58, 0x38, 0x62, 0xd9, 0x64, 0x3c, 0x51, 0x4a,
	0x84, 0xba, 0x78, 0x40, 0x2b, 0x9f, 0xec, 0x08, 0x52, 0x20, 0xf5, 0x78, 0x2e, 0x23, 0xe1, 0x8c,
	0xa1, 0x8d, 0x7e, 0x1b, 0xf7, 0xc6, 0x86, 0xce, 0xa1, 0xb1, 0xef, 0xee, 0xbf, 0xd6, 0x96, 0xb1,
	0x5a, 0x5b, 0xc6, 0xcf, 0xda, 0x32, 0x3e, 0x36, 0x56, 0x69, 0xb5, 0xb1, 0x4a, 0xdf, 0x1b, 0xab,
	0xf4, 0x7c, 0x33, 0x0d, 0xf4, 0x6b, 0xc2, 0xfa, 0x5c, 0xbe, 0x0f, 0xb8, 0xa7, 0x45, 0xe8, 0x2d,
	0x07, 0x22, 0xe6, 0xb7, 0xbb, 0x3d, 0x58, 0xe2, 0x26, 0xe8, 0x34, 0x12, 0x31, 0xab, 0xe1, 0x1a,
	0xd8, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0x82, 0x9b, 0x46, 0x29, 0x02, 0x00, 0x00,
}

func (m *Ubcobject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ubcobject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ubcobject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlopeP3) > 0 {
		i -= len(m.SlopeP3)
		copy(dAtA[i:], m.SlopeP3)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.SlopeP3)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SlopeP2) > 0 {
		i -= len(m.SlopeP2)
		copy(dAtA[i:], m.SlopeP2)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.SlopeP2)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CurrentSupply) > 0 {
		i -= len(m.CurrentSupply)
		copy(dAtA[i:], m.CurrentSupply)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.CurrentSupply)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TradingPoint) > 0 {
		i -= len(m.TradingPoint)
		copy(dAtA[i:], m.TradingPoint)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.TradingPoint)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FactorFxy) > 0 {
		i -= len(m.FactorFxy)
		copy(dAtA[i:], m.FactorFxy)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.FactorFxy)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FactorFy) > 0 {
		i -= len(m.FactorFy)
		copy(dAtA[i:], m.FactorFy)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.FactorFy)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BPool) > 0 {
		i -= len(m.BPool)
		copy(dAtA[i:], m.BPool)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.BPool)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RefTokenPrice) > 0 {
		i -= len(m.RefTokenPrice)
		copy(dAtA[i:], m.RefTokenPrice)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.RefTokenPrice)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RefTokenSupply) > 0 {
		i -= len(m.RefTokenSupply)
		copy(dAtA[i:], m.RefTokenSupply)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.RefTokenSupply)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RefProfitFactor) > 0 {
		i -= len(m.RefProfitFactor)
		copy(dAtA[i:], m.RefProfitFactor)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.RefProfitFactor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.QS3) > 0 {
		i -= len(m.QS3)
		copy(dAtA[i:], m.QS3)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.QS3)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.S2) > 0 {
		i -= len(m.S2)
		copy(dAtA[i:], m.S2)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.S2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.S1) > 0 {
		i -= len(m.S1)
		copy(dAtA[i:], m.S1)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.S1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.S0) > 0 {
		i -= len(m.S0)
		copy(dAtA[i:], m.S0)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.S0)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FS0) > 0 {
		i -= len(m.FS0)
		copy(dAtA[i:], m.FS0)
		i = encodeVarintUbcobject(dAtA, i, uint64(len(m.FS0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUbcobject(dAtA []byte, offset int, v uint64) int {
	offset -= sovUbcobject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ubcobject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FS0)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.S0)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.S1)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.S2)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.QS3)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.RefProfitFactor)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.RefTokenSupply)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.RefTokenPrice)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.BPool)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.FactorFy)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.FactorFxy)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.TradingPoint)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.CurrentSupply)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.SlopeP2)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	l = len(m.SlopeP3)
	if l > 0 {
		n += 1 + l + sovUbcobject(uint64(l))
	}
	return n
}

func sovUbcobject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUbcobject(x uint64) (n int) {
	return sovUbcobject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ubcobject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUbcobject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ubcobject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ubcobject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FS0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FS0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QS3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QS3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefProfitFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefProfitFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefTokenSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefTokenSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefTokenPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefTokenPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactorFy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactorFy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactorFxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactorFxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlopeP2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlopeP2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlopeP3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUbcobject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUbcobject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlopeP3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUbcobject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUbcobject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUbcobject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUbcobject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUbcobject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUbcobject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUbcobject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUbcobject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUbcobject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUbcobject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUbcobject = fmt.Errorf("proto: unexpected end of group")
)
