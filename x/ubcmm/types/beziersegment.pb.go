// Copyright (c) 2022-2023 - for information on the respective copyright owner
// see the NOTICE file and/or the repository at
// https://github.com/catenax-ng/product-esc-backbone-code
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escbackbone/ubcmm/beziersegment.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BezierSegment represent a cubic bezier curve with a dynamic shape and a
// bounded interval.
//
// The curve parameters set during initialization could be modified during
// shift up and undergird operations.
//
// A and B are the two control points. P0 and P1 are the start and end points
// of the curve. DeltaX is the length of the x-interval.
type BezierSegment struct {
	A      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=a,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"a"`
	B      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=b,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"b"`
	P0X    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=p0X,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"p0X"`
	P0Y    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=p0Y,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"p0Y"`
	P1X    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=p1X,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"p1X"`
	P1Y    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=p1Y,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"p1Y"`
	DeltaX github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=deltaX,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"deltaX"`
}

func (m *BezierSegment) Reset()         { *m = BezierSegment{} }
func (m *BezierSegment) String() string { return proto.CompactTextString(m) }
func (*BezierSegment) ProtoMessage()    {}
func (*BezierSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_615687dae1a6ba13, []int{0}
}
func (m *BezierSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BezierSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BezierSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BezierSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BezierSegment.Merge(m, src)
}
func (m *BezierSegment) XXX_Size() int {
	return m.Size()
}
func (m *BezierSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_BezierSegment.DiscardUnknown(m)
}

var xxx_messageInfo_BezierSegment proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BezierSegment)(nil), "escbackbone.ubcmm.BezierSegment")
}

func init() {
	proto.RegisterFile("escbackbone/ubcmm/beziersegment.proto", fileDescriptor_615687dae1a6ba13)
}

var fileDescriptor_615687dae1a6ba13 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0x2d, 0x4e, 0x4e,
	0x4a, 0x4c, 0xce, 0x4e, 0xca, 0xcf, 0x4b, 0xd5, 0x2f, 0x4d, 0x4a, 0xce, 0xcd, 0xd5, 0x4f, 0x4a,
	0xad, 0xca, 0x4c, 0x2d, 0x2a, 0x4e, 0x4d, 0xcf, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x44, 0x52, 0xa6, 0x07, 0x56, 0x26, 0x25, 0x92, 0x9e, 0x9f, 0x9e, 0x0f, 0x96,
	0xd5, 0x07, 0xb1, 0x20, 0x0a, 0x95, 0x6e, 0x33, 0x73, 0xf1, 0x3a, 0x81, 0x0d, 0x08, 0x86, 0x18,
	0x20, 0x64, 0xc3, 0xc5, 0x98, 0x28, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0xe9, 0xa4, 0x77, 0xe2, 0x9e,
	0x3c, 0xc3, 0xad, 0x7b, 0xf2, 0x6a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9,
	0xfa, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0x50, 0x4a, 0xb7, 0x38, 0x25, 0x5b, 0xbf, 0xa4, 0xb2,
	0x20, 0xb5, 0x58, 0xcf, 0x25, 0x35, 0x39, 0x88, 0x31, 0x11, 0xa4, 0x3b, 0x49, 0x82, 0x99, 0x3c,
	0xdd, 0x49, 0x42, 0x0e, 0x5c, 0xcc, 0x05, 0x06, 0x11, 0x12, 0xac, 0x64, 0xe9, 0x07, 0x69, 0x85,
	0x98, 0x10, 0x29, 0xc1, 0x48, 0xae, 0x09, 0x91, 0x60, 0x13, 0x0c, 0x23, 0x24, 0xd8, 0xc8, 0x34,
	0xc1, 0x10, 0xe2, 0x06, 0xc3, 0x48, 0x09, 0x16, 0x72, 0x4d, 0x88, 0x14, 0x72, 0xe3, 0x62, 0x4b,
	0x49, 0xcd, 0x29, 0x49, 0x8c, 0x90, 0x60, 0x27, 0xcb, 0x10, 0xa8, 0x6e, 0x27, 0xf7, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b,
	0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x45, 0x36, 0x29, 0xb1, 0x24, 0x35, 0x2f,
	0xb1, 0x42, 0x3f, 0xb5, 0x38, 0x59, 0x17, 0x9e, 0xb6, 0x2a, 0xa0, 0xa9, 0x0b, 0x6c, 0x68, 0x12,
	0x1b, 0x38, 0xb5, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xad, 0xfb, 0x28, 0x0b, 0x7f, 0x02,
	0x00, 0x00,
}

func (m *BezierSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BezierSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BezierSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DeltaX.Size()
		i -= size
		if _, err := m.DeltaX.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.P1X.Size()
		i -= size
		if _, err := m.P1X.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.P0X.Size()
		i -= size
		if _, err := m.P0X.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.P1Y.Size()
		i -= size
		if _, err := m.P1Y.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.B.Size()
		i -= size
		if _, err := m.B.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.A.Size()
		i -= size
		if _, err := m.A.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.P0Y.Size()
		i -= size
		if _, err := m.P0Y.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBeziersegment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBeziersegment(dAtA []byte, offset int, v uint64) int {
	offset -= sovBeziersegment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BezierSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.P0Y.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	l = m.A.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	l = m.B.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	l = m.P1Y.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	l = m.P0X.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	l = m.P1X.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	l = m.DeltaX.Size()
	n += 1 + l + sovBeziersegment(uint64(l))
	return n
}

func sovBeziersegment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBeziersegment(x uint64) (n int) {
	return sovBeziersegment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BezierSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeziersegment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BezierSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BezierSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P0Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P0Y.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.A.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1Y", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P1Y.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P0X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P0X.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1X", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.P1X.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeziersegment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeltaX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeziersegment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeziersegment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeziersegment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeziersegment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeziersegment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeziersegment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBeziersegment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBeziersegment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBeziersegment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeziersegment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBeziersegment = fmt.Errorf("proto: unexpected end of group")
)
