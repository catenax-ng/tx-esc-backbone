// Copyright (c) 2022-2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Apache License, Version 2.0 which is available at
// https://www.apache.org/licenses/LICENSE-2.0.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escbackbone/resourcesync/resource_map.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResourceMap struct {
	Resource  `protobuf:"bytes,1,opt,name=resource,proto3,embedded=resource" json:"resource"`
	AuditLogs *Audit `protobuf:"bytes,2,opt,name=auditLogs,proto3" json:"auditLogs,omitempty"`
}

func (m *ResourceMap) Reset()         { *m = ResourceMap{} }
func (m *ResourceMap) String() string { return proto.CompactTextString(m) }
func (*ResourceMap) ProtoMessage()    {}
func (*ResourceMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6147e3f06a83316, []int{0}
}
func (m *ResourceMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMap.Merge(m, src)
}
func (m *ResourceMap) XXX_Size() int {
	return m.Size()
}
func (m *ResourceMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMap.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMap proto.InternalMessageInfo

func (m *ResourceMap) GetAuditLogs() *Audit {
	if m != nil {
		return m.AuditLogs
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceMap)(nil), "escbackbone.resourcesync.ResourceMap")
}

func init() {
	proto.RegisterFile("escbackbone/resourcesync/resource_map.proto", fileDescriptor_d6147e3f06a83316)
}

var fileDescriptor_d6147e3f06a83316 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x2d, 0x4e, 0x4e,
	0x4a, 0x4c, 0xce, 0x4e, 0xca, 0xcf, 0x4b, 0xd5, 0x2f, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e,
	0x2d, 0xae, 0xcc, 0x4b, 0x86, 0x73, 0xe2, 0x73, 0x13, 0x0b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x24, 0x90, 0x14, 0xeb, 0x21, 0x2b, 0x96, 0x52, 0x27, 0x68, 0x0c, 0xc4, 0x08, 0x29, 0x15,
	0x9c, 0x0a, 0x13, 0x4b, 0x53, 0x32, 0x4b, 0xa0, 0xaa, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x4c,
	0x7d, 0x10, 0x0b, 0x22, 0xaa, 0x34, 0x8d, 0x91, 0x8b, 0x3b, 0x08, 0xaa, 0xc5, 0x37, 0xb1, 0x40,
	0xc8, 0x83, 0x8b, 0x03, 0x66, 0x82, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x92, 0x1e, 0x2e,
	0x17, 0xea, 0xc1, 0x34, 0x3a, 0x71, 0x9c, 0xb8, 0x27, 0xcf, 0x70, 0xe1, 0x9e, 0x3c, 0x63, 0x10,
	0x5c, 0xb7, 0x90, 0x2d, 0x17, 0x27, 0xd8, 0x7a, 0x9f, 0xfc, 0xf4, 0x62, 0x09, 0x26, 0xb0, 0x51,
	0xf2, 0xb8, 0x8d, 0x72, 0x04, 0x29, 0x0d, 0x42, 0xe8, 0x70, 0xf2, 0x3b, 0xf1, 0x48, 0x8e, 0xf1,
	0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e,
	0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x93, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc,
	0x5c, 0xfd, 0xe4, 0xc4, 0x92, 0xd4, 0xbc, 0xc4, 0x0a, 0xfd, 0xd4, 0xe2, 0x64, 0x5d, 0x78, 0x10,
	0x54, 0xa0, 0x06, 0x42, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0xd8, 0xbf, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc2, 0xfe, 0xef, 0x00, 0x9d, 0x01, 0x00, 0x00,
}

func (m *ResourceMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuditLogs != nil {
		{
			size, err := m.AuditLogs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResourceMap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintResourceMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourceMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Resource.Size()
	n += 1 + l + sovResourceMap(uint64(l))
	if m.AuditLogs != nil {
		l = m.AuditLogs.Size()
		n += 1 + l + sovResourceMap(uint64(l))
	}
	return n
}

func sovResourceMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourceMap(x uint64) (n int) {
	return sovResourceMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuditLogs == nil {
				m.AuditLogs = &Audit{}
			}
			if err := m.AuditLogs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourceMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourceMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourceMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourceMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourceMap = fmt.Errorf("proto: unexpected end of group")
)
