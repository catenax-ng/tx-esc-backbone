// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escbackbone/resourcesync/resource.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReceiptLog int32

const (
	ReceiptLog_RECEIPT_NOT_SET ReceiptLog = 0
	ReceiptLog_RECEIPT_APPLIED ReceiptLog = 1
)

var ReceiptLog_name = map[int32]string{
	0: "RECEIPT_NOT_SET",
	1: "RECEIPT_APPLIED",
}

var ReceiptLog_value = map[string]int32{
	"RECEIPT_NOT_SET": 0,
	"RECEIPT_APPLIED": 1,
}

func (x ReceiptLog) String() string {
	return proto.EnumName(ReceiptLog_name, int32(x))
}

func (ReceiptLog) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3149da7e1850b6f5, []int{0}
}

type Resource struct {
	// issue of resource change
	Originator string `protobuf:"bytes,1,opt,name=originator,proto3" json:"originator,omitempty"`
	// id of the resource by originator -  unique per originator
	OrigResId string `protobuf:"bytes,2,opt,name=origResId,proto3" json:"origResId,omitempty"`
	// pointer to the system holding the information of the resource
	TargetSystem string `protobuf:"bytes,3,opt,name=targetSystem,proto3" json:"targetSystem,omitempty"`
	// Id of the resource to access it at the target system
	ResourceKey string `protobuf:"bytes,4,opt,name=resourceKey,proto3" json:"resourceKey,omitempty"`
	// Hash of the resource
	DataHash []byte `protobuf:"bytes,5,opt,name=dataHash,proto3" json:"dataHash,omitempty"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_3149da7e1850b6f5, []int{0}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *Resource) GetOrigResId() string {
	if m != nil {
		return m.OrigResId
	}
	return ""
}

func (m *Resource) GetTargetSystem() string {
	if m != nil {
		return m.TargetSystem
	}
	return ""
}

func (m *Resource) GetResourceKey() string {
	if m != nil {
		return m.ResourceKey
	}
	return ""
}

func (m *Resource) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func init() {
	proto.RegisterEnum("escbackbone.resourcesync.ReceiptLog", ReceiptLog_name, ReceiptLog_value)
	proto.RegisterType((*Resource)(nil), "escbackbone.resourcesync.Resource")
}

func init() {
	proto.RegisterFile("escbackbone/resourcesync/resource.proto", fileDescriptor_3149da7e1850b6f5)
}

var fileDescriptor_3149da7e1850b6f5 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xfb, 0x30,
	0x1c, 0xc6, 0x9b, 0xdf, 0x4f, 0x65, 0x8b, 0x03, 0x47, 0xbc, 0x84, 0x21, 0x61, 0x0c, 0xc1, 0x21,
	0xb8, 0x1d, 0x14, 0xef, 0xfe, 0x29, 0x38, 0x1c, 0xb3, 0x64, 0x3d, 0x79, 0x19, 0x69, 0xfa, 0xa5,
	0x2b, 0xb2, 0xa6, 0x24, 0x29, 0xac, 0xef, 0xc2, 0xd7, 0xe1, 0x2b, 0xf1, 0xb8, 0xa3, 0x47, 0x69,
	0xdf, 0x88, 0x58, 0xb5, 0x76, 0x07, 0x8f, 0xcf, 0xe7, 0xf9, 0x24, 0x7c, 0x79, 0xf0, 0x09, 0x18,
	0x19, 0x08, 0xf9, 0x14, 0xa8, 0x04, 0xc6, 0x1a, 0x8c, 0xca, 0xb4, 0x04, 0x93, 0x27, 0xb2, 0x0e,
	0xa3, 0x54, 0x2b, 0xab, 0x08, 0x6d, 0x88, 0xa3, 0xa6, 0xd8, 0x3b, 0xfe, 0xf3, 0x0b, 0x91, 0x85,
	0xb1, 0xfd, 0x7a, 0x3f, 0x78, 0x41, 0xb8, 0xc5, 0xbf, 0x4b, 0xc2, 0x30, 0x56, 0x3a, 0x8e, 0xe2,
	0x44, 0x58, 0xa5, 0x29, 0xea, 0xa3, 0x61, 0x9b, 0x37, 0x08, 0x39, 0xc2, 0xed, 0xcf, 0xc4, 0xc1,
	0x4c, 0x42, 0xfa, 0xaf, 0xaa, 0x7f, 0x01, 0x19, 0xe0, 0x8e, 0x15, 0x3a, 0x02, 0x3b, 0xcf, 0x8d,
	0x85, 0x15, 0xfd, 0x5f, 0x09, 0x5b, 0x8c, 0xf4, 0xf1, 0xfe, 0xcf, 0x29, 0xf7, 0x90, 0xd3, 0x9d,
	0x4a, 0x69, 0x22, 0xd2, 0xc3, 0xad, 0x50, 0x58, 0x71, 0x27, 0xcc, 0x92, 0xee, 0xf6, 0xd1, 0xb0,
	0xc3, 0xeb, 0x7c, 0x7a, 0x89, 0x31, 0x07, 0x09, 0x71, 0x6a, 0xa7, 0x2a, 0x22, 0x87, 0xf8, 0x80,
	0xbb, 0x37, 0xee, 0xc4, 0xf3, 0x17, 0xb3, 0x07, 0x7f, 0x31, 0x77, 0xfd, 0xae, 0xd3, 0x84, 0x57,
	0x9e, 0x37, 0x9d, 0xb8, 0xb7, 0x5d, 0x74, 0x3d, 0x7b, 0x2d, 0x18, 0xda, 0x14, 0x0c, 0xbd, 0x17,
	0x0c, 0x3d, 0x97, 0xcc, 0xd9, 0x94, 0xcc, 0x79, 0x2b, 0x99, 0xf3, 0x78, 0x11, 0xc5, 0x76, 0x99,
	0x05, 0x23, 0xa9, 0x56, 0x63, 0x29, 0x2c, 0x24, 0x62, 0x3d, 0x06, 0x23, 0xcf, 0xea, 0xe1, 0xd6,
	0xdb, 0xd3, 0xd9, 0x3c, 0x05, 0x13, 0xec, 0x55, 0xdb, 0x9d, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xee, 0xe0, 0xae, 0xb8, 0xa6, 0x01, 0x00, 0x00,
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintResource(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceKey) > 0 {
		i -= len(m.ResourceKey)
		copy(dAtA[i:], m.ResourceKey)
		i = encodeVarintResource(dAtA, i, uint64(len(m.ResourceKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetSystem) > 0 {
		i -= len(m.TargetSystem)
		copy(dAtA[i:], m.TargetSystem)
		i = encodeVarintResource(dAtA, i, uint64(len(m.TargetSystem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrigResId) > 0 {
		i -= len(m.OrigResId)
		copy(dAtA[i:], m.OrigResId)
		i = encodeVarintResource(dAtA, i, uint64(len(m.OrigResId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Originator) > 0 {
		i -= len(m.Originator)
		copy(dAtA[i:], m.Originator)
		i = encodeVarintResource(dAtA, i, uint64(len(m.Originator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResource(dAtA []byte, offset int, v uint64) int {
	offset -= sovResource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Originator)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	l = len(m.OrigResId)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	l = len(m.TargetSystem)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	l = len(m.ResourceKey)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	return n
}

func sovResource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResource(x uint64) (n int) {
	return sovResource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Originator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Originator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigResId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigResId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = append(m.DataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DataHash == nil {
				m.DataHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResource = fmt.Errorf("proto: unexpected end of group")
)
